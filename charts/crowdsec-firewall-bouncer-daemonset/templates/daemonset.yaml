apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "crowdsec-firewall-bouncer-daemonset.fullname" . }}
  labels:
    {{- include "crowdsec-firewall-bouncer-daemonset.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "crowdsec-firewall-bouncer-daemonset.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "crowdsec-firewall-bouncer-daemonset.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      hostNetwork: true
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: "install-ipsets"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command:
            - /bin/sh
            - -c
            - |
              ./install_ipsets.sh && echo "done installing ipsets"
          securityContext:
            privileged: true
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            privileged: true
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command: 
          - /bin/sh
          - -c
          - |
            cp crowdsec-firewall-bouncer.yaml crowdsec-firewall-bouncer.processed.yaml && \
            { grep -q "^${HOSTNAME}:" /keys/apikeys.yaml && \
            cat /keys/apikeys.yaml | awk -v hostname="${HOSTNAME}" -F': ' '$1 == hostname {print "\napi_key: " $2}' >> crowdsec-firewall-bouncer.processed.yaml || \
            { echo "Error: Hostname '$HOSTNAME' not found in '/keys/apikeys.yaml'"; exit 1; }; } && \
            crowdsec-firewall-bouncer -c crowdsec-firewall-bouncer.processed.yaml
          volumeMounts:
          - name: crowdsec-firewall-bouncer-config
            mountPath: /crowdsec-firewall-bouncer.yaml
            subPath: crowdsec-firewall-bouncer.yaml
          - name: apikeys
            mountPath: "/keys"

      volumes:
      - name: crowdsec-firewall-bouncer-config
        configMap:
          name: crowdsec-firewall-bouncer-config
      - name: apikeys
        secret:
          secretName: {{.Values.existingSecretName}}
  
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

